library(tidyverse)
library(MatchIt)
data("lalonde")
View(lalonde)
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("MatchIt")
library("marginaleffects")
d <- readRDS("d.RDS")
# matchit function implements matching
# Formula: Treatment ~ variables to match on
# method: nearest is a greedy 1:1 matching without replacement
# distance: euclidean (other possible options are scaled_euclidean, mahalanobis, robust_mahalanobis)
# read more on distances here: https://rdrr.io/cran/MatchIt/man/distance.html#mat
m.out0 <- matchit(a == "college" ~ log_parent_income + log_parent_wealth
+ test_percentile,
method = "nearest", distance = "euclidean",
data = d)
View(d)
lalonde|>
select(treat,race,married,nondegree)
lalonde|>
select(treat,race,married,nodegree)
lalonde|>
select(treat,race,married,nodegree)|>
matchit(treat~race+married+nodegree,method='exact')
lalonde|>
select(treat,race,married,nodegree)|>
matchit(treat~race+married+nodegree,data=lalonde,method='exact')
lalonde|>
select(treat,race,married,nodegree)|>
matchit(treat~ race+married+nodegree,data=lalonde,method='exact')
lalonde|>
matchit(treat~ race+married+nodegree,data=lalonde,method='exact')
lalonde|>
matchit(treat~ race+married+nodegree,data=lalonde,method="exact")
lalonde|>
matchit()
lalonde|>
matchit
matchit(treat~race+married)
matchit(treat~race+married,data = lalonde)
matchit(treat~race+married,data = lalonde,method = 'exact')
matchit(treat~race+married+nodegree,data = lalonde,method = 'exact')
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("MatchIt")
library("marginaleffects")
# Load the data
data("lalonde")
# See what's in the data
?lalonde # this opens up the "Help" tab with the documentation!
head(lalonde)
# method: nearest (i.e. greedy 1:1)
# distance: glm specifies propensity score matching using the propensity score estimated
# using logistic regression
# data: lalonde (the data set we're working with)
# replace: True (T) or False (F) - whether to sample with or without replacement.
# Note, if allowing for replacement, greedy and optimal are the same
# So for the function, you only need to specify if using method = "nearest"
# ratio: how many control matches for each treated unit
m.out0 <- matchit(treat ~ re74 + re75 + age + race + educ + married + nodegree,
method = "nearest", distance = "glm",
data = lalonde, replace = F,
ratio = 1)
?summary.matchit # Look in the Help tab (on the bottom right) for documentation on summary.matchit
# interactions: check interaction terms too? (T or F)
# un: show statistics for unmatched data as well (T or F)
summary(m.out0, interactions = F, un = F)
# Std. Mean Diff (SMD): difference of means, standardized by sd of treatment group
# Var. Ratio: ratio of variances in treatment and control group. Compares spread of data
# Rubin (2001) presents rule of thumb that SMD should be less than .25 and variance ratio should be between .5 and 2
# Max eCDF: Kolmogorov-Smirnov statistic. Max difference across entire CDF
matchit(treat~race+married+nodegree,data = lalonde,method = 'exact')
matchit(treat~race+married+nodegree,data = lalonde,method = 'exact')|>
count(treat)
matchit(treat~race+married+nodegree,data = lalonde,method = 'exact')|>
summary()
matchit(race~married+nodegree,data = lalonde,method = 'exact')|>
summary()
View(lalonde)
matchit(married~race+nodegree,data = lalonde,method = 'exact')|>
summary()
matchit(treat~race+married+nodegree,data = lalonde,method = 'exact')|>
summary()
View(lalonde)
m_out_data<-matchit(treat~race+married+nodegree,data = lalonde,method = 'exact')|>
summary()
m_out_data<-matchit(treat~race+married+nodegree,data = lalonde,method = 'exact')|>
summary()
m_out_data
m.out0.data <- get_matches(m_out_data)
m_out_data<-matchit(treat~race+married+nodegree,data = lalonde,method = 'exact')
m_out_data<-matchit(treat~race+married+nodegree,data = lalonde,method = 'exact')
summary(m_out_data)
m.out0.data <- get_matches(m_out_data)
m_out_data<-matchit(treat~race+married+nodegree,data = lalonde,method = 'exact')
summary(m_out_data)
lm(re78~race+married+nodegree+treat, data = m_out_data, weights = weights)
m_out_data<-matchit(treat~race+married+nodegree,data = lalonde,method = 'exact')
summary(m_out_data)
m_out_data<-matchit(treat~race+married+nodegree,data = lalonde,method = 'exact')
summary(m_out_data)
lm(re78~race+married+nodegree+treat, data = m_out_data, weights = weights)
m_out_data<-matchit(treat~race+married+nodegree,data = lalonde,method = 'exact')
summary(m_out_data)
get_matches(m_out_data)
m_out_data<-matchit(treat~race+married+nodegree,data = lalonde,method = 'exact')
summary(m_out_data)
match.data(m_out_data)
m_out_data<-matchit(treat~race+married+nodegree,data = lalonde,method = 'exact')
summary(m_out_data)
m_out_data_get<-match.data(m_out_data)
m_out_data_get<-match.data(m_out_data)
lm(re78~race+married+nodegree+treat, data = m_out_data, weights = weights)
m_out_data_get<-match.data(m_out_data)
lm(re78~race+married+nodegree+treat, data = m_out_data_get, weights = weights)
?summary.matchit # Look in the Help tab (on the bottom right) for documentation on summary.matchit
# interactions: check interaction terms too? (T or F)
# un: show statistics for unmatched data as well (T or F)
summary(m.out0, interactions = F, un = F)
# Std. Mean Diff (SMD): difference of means, standardized by sd of treatment group
# Var. Ratio: ratio of variances in treatment and control group. Compares spread of data
# Rubin (2001) presents rule of thumb that SMD should be less than .25 and variance ratio should be between .5 and 2
# Max eCDF: Kolmogorov-Smirnov statistic. Max difference across entire CDF
## Produces QQ plots of all variables in which.xs
plot(m.out0, type = "qq", which.xs = ~age + re74, interactive = F)
## Plots the density of all variables in which.xs
plot(m.out0, type = "density", which.xs = ~age + re74 + race, interactive = F)
## Plots the empirical CDF of all variables in which.xs
plot(m.out0, type = "ecdf", which.xs = ~age + re74, interactive = F)
m_out_data_get<-match.data(m_out_data)
lm(re78~race+married+nodegree+treat, data = m_out_data_get, weights = weights)
lm(treat~race+married+nodegree, data = m_out_data_get, weights = weights)
m_out_data_get<-match.data(m_out_data)
lm(re78~race+married+nodegree+treat, data = m_out_data_get, weights = weights)
matchit(treat~race+married+nodegree+re74,data = lalonde,method = 'exact')
m_out_data_get<-match.data(m_out_data)
lm(re78~race+married+nodegree+treat, data = m_out_data_get, weights = weights)
m_out_new<-matchit(treat~race+married+nodegree+re74,data = lalonde,method = 'exact')
m_out_new<-matchit(treat~race+married+nodegree+re74,data = lalonde,method = 'exact')
summar(m_out_new)
m_out_new<-matchit(treat~race+married+nodegree+re74,data = lalonde,method = 'exact')
summary(m_out_new)
m_out_new<-matchit(treat~race+married+nodegree+re74,data = lalonde,method = 'exact')
summary(m_out_new)
matched <- match.data(m_out_new)
summary(matched)
outcome_model <- lm(re78 ~ treat * (race + married + nodegree + re74),
data = lalonde)
lalonde|>
filter(treat==0)
treated_d1<-lalonde|>
filter(treat==1)
treated_d0<-lalonde|>
filter(treat==0)
treated_d1<-lalonde|>
filter(treat==1)
treated_d0<-lalonde|>
filter(treat==0)
outcome_model_d1 <- lm(re78 ~ treat * (race + married + nodegree + re74),
data = treated_d1)
outcome_model_d0 <- lm(re78 ~ treat * (race + married + nodegree + re74),
data = treated_d0)
treated_d1<-lalonde|>
filter(treat==1)
treated_d0<-lalonde|>
filter(treat==0)
outcome_model_d1 <- lm(re78 ~ treat * (race + married + nodegree + re74),
data = treated_d1)
outcome_model_d0 <- lm(re78 ~ treat * (race + married + nodegree + re74),
data = treated_d0)
treated_d1<-lalonde|>
mutate(treat=1)
treated_d0<-lalonde|>
mutate(treat=0)
outcome_model_d1 <- lm(re78 ~ treat * (race + married + nodegree + re74),
data = treated_d1)
outcome_model_d0 <- lm(re78 ~ treat * (race + married + nodegree + re74),
data = treated_d0)
treated_d1<-lalonde|>
mutate(treat=1)
treated_d0<-lalonde|>
mutate(treat=0)
outcome_model_d1 <- lm(re78 ~ treat * (race + married + nodegree + re74),
data = treated_d1)
outcome_model_d0 <- lm(re78 ~ treat * (race + married + nodegree + re74),
data = treated_d0)
pred_outcome<-lalonde|>
mutate(
yhat1=predict(outcome_model_d1,treated_d1),
yhat0=predict(outcome_model_d0,treated_d0)
)
treated_d1<-lalonde|>
mutate(treat=1)
treated_d0<-lalonde|>
mutate(treat=0)
outcome_model_d1 <- lm(re78 ~ treat * (race + married + nodegree + re74),
data = treated_d1)
outcome_model_d0 <- lm(re78 ~ treat * (race + married + nodegree + re74),
data = treated_d0)
pred_outcome<-lalonde|>
mutate(
yhat1=predict(outcome_model_d1,treated_d1),
yhat0=predict(outcome_model_d0,treated_d0)
)
head(pred_outcome)
treated_d1<-lalonde|>
mutate(treat=1)
treated_d0<-lalonde|>
mutate(treat=0)
outcome_model_d1 <- lm(re78 ~ treat * (race + married + nodegree + re74),
data = treated_d1)
outcome_model_d0 <- lm(re78 ~ treat * (race + married + nodegree + re74),
data = treated_d0)
pred_outcome<-lalonde|>
mutate(
yhat1=predict(outcome_model_d1,treated_d1),
yhat0=predict(outcome_model_d0,treated_d0)
)
head(pred_outcome)
pred_outcome|>
summarize(average_yhat1 = mean(yhat1),
average_yhat0 = mean(yhat0),
average_effect = mean(yhat1 - yhat0))
treated_d1<-lalonde|>
mutate(treat=1)
treated_d0<-lalonde|>
mutate(treat=0)
outcome_model <- lm(re78 ~ treat * (race + married + nodegree + re74),
data = lalonde)
pred_outcome<-lalonde|>
mutate(
yhat1=predict(outcome_model,treated_d1),
yhat0=predict(outcome_model,treated_d0)
)
head(pred_outcome)
pred_outcome|>
summarize(average_yhat1 = mean(yhat1),
average_yhat0 = mean(yhat0),
average_effect = mean(yhat1 - yhat0))
treatment_model <- glm(treat ~ race + married + nodegree + re74,
data = lalonde,
family = binomial)
with_weight <- lalonde %>%
# Create the propensity score
mutate(p_a_1 = predict(treatment_model, type = "response"),
pscore = case_when(treat == 1 ~ p_a_1,
treat == 0 ~ 1 - p_a_1),
weight = p_a_1 / pscore)
with_weight
with_weight|>
group_by(treat)
with_weight|>
filter(treat == 0)|>
summarize(max_weight = max(weight))
with_weight|>
group_by(treat)|>
summarise(
weight_mean=weighted.mean(re78,weight)
)
library(tidyverse)
library(MatchIt)
data("lalonde")
View(lalonde)
m_out_data<-matchit(treat~race+married+nodegree,data = lalonde,method = 'exact')
summary(m_out_data)
m_out_data_get<-match.data(m_out_data)
lm(re78~race+married+nodegree+treat, data = m_out_data_get, weights = weights)
m_out_new<-matchit(treat~race+married+nodegree+re74,data = lalonde,method = 'exact')
summary(m_out_new)
matched <- match.data(m_out_new)
summary(matched)
outcome_model <- lm(re78 ~ treat * (race + married + nodegree + re74),
data = lalonde)
treated_d1<-lalonde|>
mutate(treat=1)
treated_d0<-lalonde|>
mutate(treat=0)
outcome_model <- lm(re78 ~ treat * (race + married + nodegree + re74),
data = lalonde)
pred_outcome<-lalonde|>
mutate(
yhat1=predict(outcome_model,treated_d1),
yhat0=predict(outcome_model,treated_d0)
)
head(pred_outcome)
pred_display<-pred_outcome|>
summarize(average_yhat1 = mean(yhat1),
average_yhat0 = mean(yhat0),
average_effect = mean(yhat1 - yhat0))
pred_display
treatment_model <- glm(treat ~ race + married + nodegree + re74,
data = lalonde,
family = binomial)
with_weight <- lalonde %>%
# Create the propensity score
mutate(p_a_1 = predict(treatment_model, type = "response"),
pscore = case_when(treat == 1 ~ p_a_1,
treat == 0 ~ 1 - p_a_1),
weight = p_a_1 / pscore)
max_weight_untreated <- with_weight|>
filter(treat == 0)|>
summarize(max_weight = max(weight))
max_weight_untreated
with_weight|>
group_by(treat)|>
summarise(
weight_mean=weighted.mean(re78,weight)
)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'nearest')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'optimal')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'optimal',distance = 'mahalanobis')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'optimal',distance = 'mahalanobis',estimand = 'ATT')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'cem',distance = 'mahalanobis',estimand = 'ATT')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'optimal',distance = 'mahalanobis',estimand = 'ATT')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'optimal',distance = 'euclidean',estimand = 'ATT')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'optimal',distance = 'scaled_euclidean',estimand = 'ATT')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'optimal',distance = 'robust_mahalanobis',estimand = 'ATT')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'cem',distance = 'euclidean',estimand = 'ATT')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'optimal',distance = 'euclidean',estimand = 'ATT')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'optimal',distance = 'gam',estimand = 'ATT')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'optimal',distance = 'gbm',estimand = 'ATT')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'optimal',distance = 'gbm',estimand = 'ATT')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'optimal',distance = 'mahalanobis',estimand = 'ATT')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'cem',distance = 'mahalanobis',estimand = 'ATT')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'optimal',distance = 'mahalanobis',estimand = 'ATT')
summary(m_out_new2)
m_out_new2<-matchit(treat~race + married + nodegree + re74,data = lalonde,method = 'optimal',distance = 'mahalanobis',estimand = 'ATT')
summary(m_out_new2)
matched2 <- match.data(m_out_new2)
summary(matched2)
outcome_model2 <- lm(re78 ~ treat + race + married + nodegree + re74,
data = lalonde)
lm(re78 ~ treat + race + married + nodegree + re74,
data =m_out_new2,weights = weights)
lm(re78 ~ treat + race + married + nodegree + re74,
data =matched2,weights = weights)
